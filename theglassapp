from datetime import datetime

from kivy.app import App
from kivy.properties import Clock, BooleanProperty, StringProperty
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.screenmanager import Screen, ScreenManager
from kivymd.theming import ThemeManager


class GFMainDisplayWindow(BoxLayout, Screen):
    def logout(self):
        display_window = App.get_running_app().root.get_screen('login_window')
        display_window.ids.login_label.text = f"Thank You for using Glass App!\nHave a nice day!"
        display_window.ids.account.text = ''
        display_window.ids.password.text = ''
        display_window.ids.safe_button.disabled = True
        display_window.login_attempts = 0

    def today_date(self):
        date_today = datetime.today()
        date_format = date_today.strftime("%d-%b-%Y")
        self.ids.today_date.text = date_format


class ColdEndFeedbackWindow(BoxLayout, Screen):
    feedbacks = {}
    time_btn_ctr = 0
    AFC = 0         # Add Feedback Counter
    secured_time1 = False

    def logout(self):
        display_window = App.get_running_app().root.get_screen('login_window')
        display_window.ids.login_label.text = f"Thank You for using Glass App!\nHave a nice day!"
        display_window.ids.account.text = ''
        display_window.ids.password.text = ''
        display_window.ids.safe_button.disabled = True
        display_window.login_attempts = 0

    # FeedbackBoxLayout
    def time_btn1(self):
        """Time button will set counter to +1 for formatting purposes. Setting secured_time to True to enable editing"""
        self.time_btn_ctr += 1
        self.ids.cav_num.text = ''
        self.ids.ce_initials.text = ''
        self.ids.bottle_defects.text = ''
        self.ids.rejection.text = ''
        self.secured_time1 = True

        if self.time_btn_ctr == 1:
            self.ids.time_feedback1.text = self.time_format(1)

    def time_format(self, interval):
        """This method will format the time to Hour Minutes and Seconds, Seconds value is important."""
        time_today = datetime.now()
        formatted_time = time_today.strftime("%H:%M:%S")
        return formatted_time

    def save_add_fb(self):
        """This method saves and send data from add feedback box layout to feedback display."""
        cav_num = self.ids.cav_num.text
        ce_initials = self.ids.ce_initials.text
        bottle_defects = self.ids.bottle_defects.text
        rejection = self.ids.rejection.text
        time1 = self.time_format(1)
        self.AFC += 1

        # Setting a safe condition to prevent multiple additions in a single feedback
        if (self.time_btn_ctr == 1 and cav_num != '' and ce_initials != '' and bottle_defects != '' and rejection != ''
                and self.secured_time1):
            time_feedback = {"Feedback Time:": time1}
            self.feedbacks.update(time_feedback)

            cav_feedback = {"Cavity number:": cav_num}
            self.feedbacks.update(cav_feedback)

            ce_feedback = {"Cold End Initials:": ce_initials}
            self.feedbacks.update(ce_feedback)

            defect_feedback = {"Bottle Defect:": bottle_defects}
            self.feedbacks.update(defect_feedback)

            defect_feedback = {"Rejection:": rejection}
            self.feedbacks.update(defect_feedback)

            # This line of codes sends the data from add new feedback to feedback display boxlayout
            self.ids.post_time.text += f"{time1}\n"
            self.ids.post_cav_num.text += f"{cav_num}\n"
            self.ids.post_ce_initials.text += f"{ce_initials.upper().strip()}\n"
            self.ids.post_bottle_defects.text += f"{bottle_defects.upper().strip()}\n"
            self.ids.post_rejection.text += f"{rejection.upper().strip()}\n"

            self.ids.save_label1.text = "Your Feedback has been added. "
            self.ids.save_label1.text += 'Click "Another Feedback" to add a Feedback.'

        else:
            self.ids.save_label1.text = "Please fill up all blanks before saving!"

        for k, v in self.feedbacks.items():
            print(f"{k}, {v}")

        # This portion, lines of code will be added to send or write feedbacks and saves into a separate file.
        feedback = (f"[Feedback Time: {time1}] [Cavity Number: {cav_num.strip()}]"
                    f" [CE Initials: {ce_initials.upper().strip()}] "
                    f"[Bottle Defect: {bottle_defects.upper().strip()}] [Rejection: {rejection.upper().strip()}]\n")

        # Initiating pretext, suffix, and main filename.
        # Filename should have the Date formatted as Day-Month-Year
        pretext = "ColdEndFeedback"
        suffix = "CEFB.txt"
        date_today = datetime.today()
        fb_filename = pretext + date_today.strftime("%d%m%Y") + suffix

        if self.AFC == 1:
            with open(fb_filename, 'a') as fileobject:
                fileobject.write(feedback)

        self.secured_time1 = False

    def another_feedback(self):
        """This method resets the counters and empties the texts."""
        self.ids.save_label1.text = "Another Feedback/ Reset"
        self.ids.time_feedback1.text = "time"
        self.ids.cav_num.text = ''
        self.ids.ce_initials.text = ''
        self.ids.bottle_defects.text = ''
        self.ids.rejection.text = ''
        self.time_btn_ctr = 0
        self.AFC = 0

        self.secured_time1 = True

    def update_feedback(self, time1, cav_num, ce_initials, bottle_defects, rejection):
        self.ids.post_time.text = time1
        self.ids.post_cav_num.text = cav_num
        self.ids.post_ce_initials.text = ce_initials
        self.ids.post_bottle_defects.text = bottle_defects
        self.ids.post_rejection.text = rejection


class GlassFormingCountermeasureWindow(BoxLayout, Screen):
    # GFCountermeasureBoxLayout

    countermeasures = {}
    time_btn_ctr2 = 0
    secured_time2 = False
    add_counter_measure_counter = 0

    def logout(self):
        display_window = App.get_running_app().root.get_screen('login_window')
        display_window.ids.login_label.text = f"Thank You for using Glass App!\nHave a nice day!"
        display_window.ids.account.text = ''
        display_window.ids.password.text = ''
        display_window.ids.safe_button.disabled = True
        display_window.login_attempts = 0

    def time_btn2(self):
        """Time button will set counter to +1 for formatting purposes. Setting secured_time to True to enable editing"""
        self.ids.sec_cav_num.text = ''
        self.ids.countermeasure.text = ''
        self.ids.bottle_defect.text = ''
        self.secured_time2 = True
        self.time_btn_ctr2 += 1

        if self.time_btn_ctr2 == 1:
            self.ids.time_feedback2.text = self.time_format2(1)

    def time_format2(self, interval):
        """This method will format the time to Hour Minutes and Seconds, Seconds value is important."""
        time_today = datetime.now()
        formatted_time = time_today.strftime("%H:%M:%S")
        return formatted_time

    def save_add_cm(self):
        """This method saves and send data from add feedback box layout to feedback display."""
        sec_cav_num = self.ids.sec_cav_num.text
        countermeasure = self.ids.countermeasure.text
        downtime = self.ids.downtime.text
        bottle_defect = self.ids.bottle_defect.text
        time2 = self.time_format2(1)
        self.add_counter_measure_counter += 1

        # Setting a safe condition to prevent multiple additions in a single feedback
        if (self.secured_time2 and self.add_counter_measure_counter == 1 and sec_cav_num != '' and countermeasure != ''
                and bottle_defect != ''):
            time_feedback = {"Feedback Time:": time2}
            self.countermeasures.update(time_feedback)

            gf_countermeasure = {"Bottle Defect:": bottle_defect}
            self.countermeasures.update(gf_countermeasure)

            sec_cav_cm = {"Sec/ Cavity Number:": sec_cav_num}
            self.countermeasures.update(sec_cav_cm)

            gf_countermeasure = {"GF Countermeasure:": countermeasure}
            self.countermeasures.update(gf_countermeasure)

            gf_downtime = {"Downtime:": downtime}
            self.countermeasures.update(gf_downtime)

            # This line of codes sends the data from add new feedback to feedback display boxlayout
            self.ids.feedback_time2.text += f"{time2}\n"
            self.ids.post_sec_cav_num.text += f"{sec_cav_num.upper().strip()}\n"
            self.ids.post_countermeasure.text += f"{countermeasure.upper()}\n"
            self.ids.post_downtime.text += f"{downtime}\n"
            self.ids.post_bottle_defect.text += f"{bottle_defect.upper()}\n"

            self.ids.save_label2.text = "Your Countermeasure has been added. "
            self.ids.save_label2.text += 'Click "Another Countermeasure" to add a Countermeasure.'

            post_gf_countermeasure = f"{sec_cav_num.upper()}-{bottle_defect.upper().strip()}/{countermeasure.upper()}\n"
            # self.ids.display_report.text += post_gf_countermeasure
            display_window = App.get_running_app().root.get_screen('display_report')
            display_window.ids.display_report.text += f"{post_gf_countermeasure}"

        else:
            self.ids.save_label2.text = "Please fill all blanks before saving!"

        for k, v in self.countermeasures.items():
            print(f"{k}, {v}")

        # This portion, lines of code will be added to send or write feedbacks and saves into a separate file.
        gf_countermeasure = (f"[Feedback Time: {time2}] [Sec/ Cavity Number: {sec_cav_num}]"
                             f" [Bottle Defect: {bottle_defect.upper().strip()}]"
                             f" [Countermeasure: {countermeasure.upper()}] [Downtime: {downtime}]\n")

        # Initiating pretext, suffix, and main filename.
        # Filename should have the Date formatted as Day-Month-Year
        pretext = "GF_countermeasure"
        suffix = "GFCM.txt"
        date_today = datetime.today()
        fb_filename = pretext + date_today.strftime("%d-%m-%Y") + suffix

        if self.secured_time2 and self.add_counter_measure_counter == 1:
            with open(fb_filename, 'a') as fileobject:
                fileobject.write(gf_countermeasure)

        self.secured_time2 = False

    def another_countermeasure(self):
        """This method resets the counters and empties the texts."""
        self.ids.save_label2.text = "Another Countermeasure/ Reset"
        self.ids.time_feedback2.text = "time"
        self.ids.sec_cav_num.text = ''
        self.ids.countermeasure.text = ''
        self.ids.downtime.text = '0'
        self.ids.bottle_defect.text = ''
        self.time_btn_ctr2 = 0
        self.add_counter_measure_counter = 0

        self.secured_time2 = True


class LogInWindow(BoxLayout, Screen):
    """Initiating log in screen and saving accounts in a dictinary that will be accessed for opening of App."""
    accounts = [
                {'account': 'neil', 'password': 'pastilan', 'name': 'leomar neil'},
                {'account': 'arthur', 'password': 'pogi', 'name': 'neil arthur'},
                {'account': 'boss_ghe', 'password': 'Glassforming123', 'name': 'gerald'}
                ]

    login_attempts = 0
    start_timer_ctr = 0
    failed_login_counts = 0

    login_safe = BooleanProperty(False)
    login_confirmed = BooleanProperty(False)

    account = StringProperty('')
    password = StringProperty('')

    def logout(self):
        display_window = App.get_running_app().root.get_screen('login_window')
        display_window.ids.login_label.text = f"Thank You for using Glass App!\nHave a nice day!"
        display_window.ids.account.text = ''
        display_window.ids.password.text = ''
        display_window.ids.safe_button.disabled = True
        display_window.login_attempts = 0
        self.ids.logout.disabled = True

    def login_attempt(self):
        # Starts counter to count number of attempts made by user.
        self.login_attempts += 1

        # setting variables
        self.account = self.ids.account.text
        self.password = self.ids.password.text

        account_found = False

        # Check each account in the accounts list
        for acc in self.accounts:
            if self.login_attempts < 5:
                if acc['account'] == self.account:
                    if acc['password'] == self.password:
                        self.ids.login_label.text = f"Welcome {acc['name']}!"
                        self.login_attempts = 0
                        self.failed_login_counts = 0
                        self.login_safe = BooleanProperty(True)
                        self.login_confirmed = BooleanProperty(True)
                        account_found = True
                        display_window = App.get_running_app().root.get_screen('display_report')
                        display_window.ids.display_user.text = f"Current User: {acc['name']}"
                        display_window = App.get_running_app().root.get_screen('cold_end_report')
                        display_window.ids.display_user.text = f"Current User: {acc['name']}"
                        display_window = App.get_running_app().root.get_screen('glass_forming_report')
                        display_window.ids.display_user.text = f"Current User: {acc['name']}"
                        break

                    else:
                        self.ids.login_label.text = f"Account valid. \nWrong Password!"
                        self.ids.login_label.text += f"\nYou have {self.login_attempts} attempts made."
                        return

        if not account_found:
            self.ids.login_label.text = "Unidentified account. Please contact your supervisor."
            self.failed_login_counts += 1
            self.login_attempts += 1

        if self.login_attempts >= 5:
            self.start_timer()

    def start_timer(self):
        self.start_timer_ctr += 1
        if self.start_timer_ctr == 1:
            self.timer_value = 60
            self.time_event = Clock.schedule_interval(self.update_timer, 1)

    def update_timer(self, dt):
        if self.timer_value > 0:
            print(self.timer_value)
            self.ids.login_label.text =\
                f"Too many login attempts.\nPlease wait another minute to login again.\n{self.timer_value} seconds left"
            self.timer_value -= 1
        else:
            self.stop_timer()
            print("Timer Stopped")
            self.start_timer_ctr = 0
            self.login_attempts = 0
            self.login_safe = False
            self.failed_login_counts += 1
            self.ids.login_label.text = f"Log in again.\n You made {self.failed_login_counts} login mistake/s made."

    def stop_timer(self):
        Clock.unschedule(self.update_timer)
        print("Timer stopped")


class DisplayReportWindow(BoxLayout, Screen):
    # Line Efficiency variable/s
    send_save_ctr = 0

    def logout(self):
        display_window = App.get_running_app().root.get_screen('login_window')
        display_window.ids.login_label.text = f"Thank You for using Glass App!\nHave a nice day!"
        display_window.ids.account.text = ''
        display_window.ids.password.text = ''
        display_window.ids.safe_button.disabled = True
        display_window.login_attempts = 0

    def today_date(self):
        date_today = datetime.today()
        date_format = date_today.strftime("%d-%b-%Y")
        self.ids.today_date.text = date_format

    def send_save(self):
        # Variables for report sending
        self.send_save_ctr += 1
        date = self.ids.today_date.text
        line = self.ids.line.text
        efficiency = self.ids.efficiency.text
        mold_set = self.ids.mold_set.text
        bpm_sections = self.ids.bpm_sections.text
        running_weight = self.ids.running_weight.text
        shift = self.ids.shift_schedule.text
        pull = self.ids.pull.text

        # Initiating one send only procedure by putting counter, if counter only equal to 1 will send report.
        if (line != '' and efficiency != '' and mold_set != '' and bpm_sections != '' and running_weight != ''
                and shift != '' and pull != '' and self.send_save_ctr == 1):
            self.ids.report_label.text = "Saved"
            daily_report = (f"{line.upper().strip()}({mold_set.upper().strip()})-{efficiency}%\n"
                            f"{bpm_sections.upper().strip()}/{running_weight}\n"
                            f"Pull-{pull}\n"
                            f"\n")
            date_format_for_filename = date.replace('-', '')  # Remove dashes from the date
            report_file_name = f"DailyReport_{line}_{date_format_for_filename}.txt"
            with open(report_file_name, 'a') as fileobject:
                fileobject.write(daily_report)

            # print(daily_report)
            self.ids.report_label.text = "Data saved and sent"

            display_window = App.get_running_app().root.get_screen('display_report')
            display_window.ids.display_report.text = f"{daily_report}\n{display_window.ids.display_report.text}"

        else:
            self.ids.report_label.text = "Please fill all blanks before saving"
            self.send_save_ctr = 0


class WindowManager(ScreenManager):
    pass


class TheGlassMobileApp(App):
    theme_cls = ThemeManager()

    def build(self):
        self.theme_cls.primary_palette = "Indigo"
        self.theme_cls.accent_palette = "Pink"
        self.theme_cls.theme_style = "Dark"


TheGlassMobileApp().run()

theglass.kv
# DisplayReportWindow:

WindowManager:
    LogInWindow:
    DisplayReportWindow:
    ColdEndFeedbackWindow:
    GlassFormingCountermeasureWindow:

<LogInWindow>:
    name: "login_window"
    spacing: "15dp"
    padding: "10dp"
    orientation: "vertical"
    BoxLayout:
        size_hint: 1, .35
        Button:
            text: "The Glass App"
            disabled: True
            opacity: 100
            color: 0.25,0.04,0.85, 1
    BoxLayout:
        size_hint: 1, .25
        Label:
            id: login_label
            text: ""
    GridLayout:
        rows: 2
        cols: 2
        Button:
            text: "Account:"
            disabled: True
            opacity: 75
        TextInput:
            id: account
            multiline: False
            font_size: "50sp"
            padding_y: (self.height - self.line_height) / 2
        Button:
            text: "Password:"
            disabled: True
            opacity: 75
        TextInput:
            id: password
            multiline: False
            font_size: "50sp"
            padding_y: (self.height - self.line_height) / 2
            password: True
    BoxLayout:
        size_hint: 1, .35
        Button:
            text: "Login"
            on_press: root.login_attempt()
        Button:
            id: safe_button
            text: "Go to GFDOR"
            disabled: not root.login_safe
            on_release:
                app.root.current = "display_report"
                root.manager.transition.direction = "up"
    BoxLayout:
        size_hint: 1, None
        height: "30sp"
        Button:
            id: logout
            disabled: not root.login_confirmed
            opacity: 75
            text: "Log out"
            on_release: root.logout()

<DisplayReportWindow>:
    name: "display_report"
    orientation: "vertical"
    spacing: "3sp"
    padding: "5sp"

    # Display User and Log out button
    BoxLayout:
        size_hint: 1, None
        height: "30sp"
        Label:
            id: display_user
            text: ""
        Button:
            size_hint: None, None
            size: "100sp", "30sp"
            pos_hint: {"center_x": 0.5}
            text: "Log out"
            on_release:
                app.root.current = "login_window"
                root.manager.transition.direction = "down"
                root.logout()

    # Display Label
    BoxLayout:
        size_hint: 1, None
        height: "30sp"
        Button:
            disabled: True
            opacity: 75
            text: "Display Report"

    GridLayout:
        rows: 4
        cols: 4
        size_hint: 1, None
        height: 200
        Button:
            text: "Date"
            on_press: root.today_date()
        TextInput:
            id: today_date
            text: "Click Date Button"
            disabled: True
        Button:
            text: "Efficiency"
            disabled: True
            opacity: 100
        TextInput:
            id: efficiency
            text: ""
            multiline: False
        Button:
            text: "Line"
            disabled: True
            opacity: 100
        TextInput:
            id: line
            text: ""
            multiline: False
        Button:
            text: "Mold Number/Set"
            disabled: True
            opacity: 100
        TextInput:
            id: mold_set
            text: ""
            multiline: False
        Button:
            text: "Bpm/ number of sections"
            disabled: True
            opacity: 100
        TextInput:
            id: bpm_sections
            text: ""
            multiline: False
        Button:
            text: "Running weight"
            disabled: True
            opacity: 100
        TextInput:
            id: running_weight
            text: ""
            multiline: False
        Button:
            text: "Shift"
            disabled: True
            opacity: 100
        TextInput:
            id: shift_schedule
            text: ""
            multiline: False
        Button:
            text: "Pull"
            disabled: True
            opacity: 100
        TextInput:
            id: pull
            text: ""
            multiline: False

    BoxLayout:
        size_hint: 1, None
        height: 50
        Button:
            size_hint: .5, 1
            text: "Save"
            on_press: root.send_save()
        Label:
            id: report_label
            text: ''
        Button:
            text: "Go to Glass Forming Report"
            on_press:
                app.root.current = "glass_forming_report"
                root.manager.transition.direction = "right"
        Button:
            text: "Go to Cold End Report"
            on_press:
                app.root.current = "cold_end_report"
                root.manager.transition.direction = "left"

    BoxLayout:
        orientation: "vertical"
        Button:
            size_hint: 1, None
            height: "50sp"
            text: "Daily Report"
            disabled: True
            opacity: 100
        TextInput:
            size_hint: 1, 2
            id: display_report
            text: ""
            readonly: True


<ColdEndFeedbackWindow>:
    name: "cold_end_report"
    orientation: "vertical"

    # Display User and Log out button
    BoxLayout:
        size_hint: 1, None
        height: "30sp"
        Label:
            id: display_user
            text: ""
        Button:
            size_hint: None, None
            size: "100sp", "30sp"
            pos_hint: {"center_x": 0.5}
            text: "Log out"
            on_release:
                app.root.current = "login_window"
                root.manager.transition.direction = "down"
                root.logout()

    # Display Label
    BoxLayout:
        size_hint: 1, None
        height: "30sp"
        Button:
            disabled: True
            opacity: 75
            text: "Cold End Report"

    BoxLayout:
        spacing: "3sp"
        size_hint: 1, None
        height: "30sp"
        orientation: "vertical"
        BoxLayout:
            size_hint: 1, None
            height: "30sp"
            Button:
                text: "Go to Glass Forming Report"
                on_press:
                    app.root.current = "glass_forming_report"
                    root.manager.transition.direction = "left"
            Button:
                text: "Home"
                on_press:
                    app.root.current = "display_report"
                    root.manager.transition.direction = "right"

    BoxLayout:
        spacing: "3dp"
        # FeedbackBoxLayout
        BoxLayout:
            size_hint: .75, 1
            orientation: "vertical"
            BoxLayout:
                size_hint: 1, None
                height: "25dp"
                Button:
                    text: "Time"
                Button:
                    text: "Cav #"
                Button:
                    size_hint: .5, 1
                    text: "CE initials"
                Button:
                    text: "Bottle Defects"
                Button:
                    size_hint: .60, 1
                    text: "rejection"
            BoxLayout:
                TextInput:
                    id: post_time
                    text: ""
                    font_size: 25
                    disabled: True
                TextInput:
                    id: post_cav_num
                    text: ""
                    font_size: 25
                    disabled: True
                TextInput:
                    size_hint: .5, 1
                    id: post_ce_initials
                    text: ""
                    font_size: 25
                    disabled: True
                TextInput:
                    id: post_bottle_defects
                    text: ""
                    font_size: 25
                    disabled: True
                TextInput:
                    size_hint: .60, 1
                    id: post_rejection
                    text: ""
                    font_size: 25
                    disabled: True
            # AddFeedback
            BoxLayout:
                orientation: "vertical"
                size_hint: 1, .75
                BoxLayout:
                    orientation: "vertical"
                    Label:
                        size_hint: 1, .45
                        id: save_label1
                        text: "Please click the time first before editing"
                        font_size: 35

                    BoxLayout:
                        size_hint: 1, .25
                        Button:
                            id: time_btn1
                            text: "Click Time First"
                        Button:
                            text: "Cav #"
                        Button:
                            size_hint: .5, 1
                            text: "CE Initials"
                        Button:
                            text: "Bottle Defects"
                        Button:
                            size_hint: .60, 1
                            text: "Rejection"
                    BoxLayout:
                        Button:
                            id: time_feedback1
                            on_press: root.time_btn1()
                            text: "Click Here\nTime"
                            font_size: "18sp"
                        TextInput:
                            id: cav_num
                            text: "Enter Cavity #"
                            multiline: False
                            on_focus: if self.focus: self.text = ''
                        TextInput:
                            size_hint: .5, 1
                            id: ce_initials
                            text: "CE initials"
                            multiline: False
                            on_focus: if self.focus: self.text = ''
                        TextInput:
                            id: bottle_defects
                            text: "bottle Defects"
                            multiline: False
                            on_focus: if self.focus: self.text = ''
                        TextInput:
                            size_hint: .60, 1
                            id: rejection
                            text: "Monitoring\nOneLehr\nReject"
                            multiline: False
                            on_focus: if self.focus: self.text = ''
                    BoxLayout:
                        size_hint: 1, .75
                        spacing: 5
                        Button:
                            id: save_btn
                            text: "click to Save"
                            on_press: root.save_add_fb()

                        Button:
                            size_hint: 1, 1
                            id: plus_fb
                            text: "Another feedback/\n RESET"
                            on_press: root.another_feedback()

<GlassFormingCountermeasureWindow>:
    name: "glass_forming_report"
    orientation: "vertical"

    # Display User and Log out button
    BoxLayout:
        size_hint: 1, None
        height: "30sp"
        Label:
            id: display_user
            text: ""
        Button:
            size_hint: None, None
            size: "100sp", "30sp"
            pos_hint: {"center_x": 0.5}
            text: "Log out"
            on_release:
                app.root.current = "login_window"
                root.manager.transition.direction = "down"
                root.logout()

    # Display Label
    BoxLayout:
        size_hint: 1, None
        height: "30sp"
        Button:
            disabled: True
            opacity: 75
            text: "Glass Forming Report"


    BoxLayout:
        spacing: "3sp"
        size_hint: 1, None
        height: "30sp"
        orientation: "vertical"
        BoxLayout:
            size_hint: 1, None
            height: "30sp"
            Button:
                text: "Go to Cold End Report"
                on_press:
                    app.root.current = "cold_end_report"
                    root.manager.transition.direction = "right"
            Button:
                text: "Home"
                on_press:
                    app.root.current = "display_report"
                    root.manager.transition.direction = "left"

    # GFCounterMeasureBoxLayout
    BoxLayout:
        orientation: "vertical"
        BoxLayout:
            # Layout to show Labels thru Button to see spaces better
            size_hint: 1, None
            height: "25dp"
            Button:
                id: cm_time
                text: "Time"
                size_hint: .2, 1
                font_size: 25
            Button:
                id: cm_sec_cav
                text: "Sec/Cav#"
                font_size: 25
                size_hint: .2, 1
            Button:
                id: cm_bottle_defect
                text: "Bottle Defect"
                font_size: 25
                size_hint: .3, 1
            Button:
                id: cm_cm
                text: "Action Taken/ Countermeasure\nInclude Mold# for any Mold Changes"
                font_size: 25
            Button:
                id: downtime
                text: "Down\nTime"
                font_size: 25
                size_hint: .1, 1
        BoxLayout:
            # Layout for Inputs according to their label
            size_hint: 1, 1
            TextInput:
                text: ""
                id: feedback_time2
                size_hint: .2, 1
                font_size: 25
                disabled: True
            TextInput:
                id: post_sec_cav_num
                text: ""
                font_size: 25
                size_hint: .2, 1
                disabled: True
            TextInput:
                id: post_bottle_defect
                text: ""
                font_size: 25
                size_hint: .3, 1
                disabled: True
            TextInput:
                id: post_countermeasure
                text: ""
                font_size: 25
                disabled: True
            TextInput:
                id: post_downtime
                text: ""
                font_size: 25
                size_hint: .1, 1
                disabled: True
        # Add Countermeasure
        BoxLayout:
            orientation: "vertical"
            size_hint: 1, .75
            BoxLayout:
                orientation: "vertical"
                Label:
                    size_hint: 1, .45
                    id: save_label2
                    text: "Please click the time first before editing"
                    font_size: 30

                BoxLayout:
                    size_hint: 1, .25
                    Button:
                        size_hint: .2, 1
                        id: time_btn
                        text: "Click Time First"
                    Button:
                        size_hint: .2, 1
                        text: "Sec/Cav #"
                    Button:
                        size_hint: .3, 1
                        text: "Bottle Defect"
                    Button:
                        text: "Action Taken/ Countermeasure"
                    Button:
                        size_hint: .1, 1
                        text: "Down\ntime"
                BoxLayout:
                    Button:
                        size_hint: .2, 1
                        id: time_feedback2
                        on_press: root.time_btn2()
                        text: "Click HERE\nTime"
                        font_size: "18sp"
                    TextInput:
                        id: sec_cav_num
                        size_hint: .2, 1
                        text: "Sec/Cav #"
                        multiline: False
                        on_focus: if self.focus: self.text = ''
                    TextInput:
                        id: bottle_defect
                        size_hint: .3, 1
                        text: "Bottle Defect"
                        multiline: False
                        on_focus: if self.focus: self.text = ''
                    TextInput:
                        id: countermeasure
                        text: "Action Taken/ Countermeasure"
                        multiline: False
                        on_focus: if self.focus: self.text = ''
                    TextInput:
                        id: downtime
                        size_hint: .1, 1
                        text: "0"
                        multiline: False
                        on_focus: if self.focus: self.text = ''
                BoxLayout:
                    size_hint: 1, .75
                    spacing: 5
                    Button:
                        id: save_btn
                        text: "click to Save"
                        on_press: root.save_add_cm()

                    Button:
                        size_hint: 1, 1
                        id: plus_fb
                        text: "Another countermeasure/\n RESET"
                        on_press: root.another_countermeasure()
